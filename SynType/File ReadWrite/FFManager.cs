using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using SynType.Chemical_Classes;
using SynType.Program_Classes;
using SynType.File_ReadWrite.SynType;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.AccessControl;
using System.Text.RegularExpressions;

namespace SynType.File_ReadWrite
{
    /// <summary>
    /// The FileFolderManager manages the document heirarchy.
    /// The folder heirarchy goes 
    /// UserFolder
    /// userinfofile
    ///     ProjectFolder1
    ///         projectinfofile
    ///         SynthesisFolder1
    ///             MoleculeFolder
    ///             synthesisfile
    ///         
    /// </summary>
    public static class FFManager
    {
        public static string GetUserDataPath(string username)
        {
            return "C:\\SynType\\Data\\" + username;
        }
       
        public static void BuildTreeView(TreeNode node, string dir, Project project, ContextMenuStrip synthDirAndFileMenu) 
        {
            DirectoryInfo dInfo = new DirectoryInfo(dir);
           
            //Loop through the subdirs
            foreach (DirectoryInfo directory in dInfo.GetDirectories())
            {
                TreeNode t = new TreeNode(directory.Name);
                Regex synDirRegEx = new Regex(@"\d+_{1}");
                bool synDirMatch = synDirRegEx.IsMatch(directory.Name);
                if (synDirMatch)
                {
                    Console.WriteLine("Building TreeView, found a syn dir match " + directory.Name);
                    t.Tag = new SynthesisDirectory(directory.FullName, project);
                    t.ContextMenuStrip = synthDirAndFileMenu;
                }
                t.Name = directory.FullName;
                
                BuildTreeView(t, directory.FullName, project, synthDirAndFileMenu);
                node.Nodes.Add(t);
            }
            foreach (FileInfo file in dInfo.GetFiles())
            {
                TreeNode t = new TreeNode(file.Name);
                t.Name = file.FullName;
                t.ContextMenuStrip = synthDirAndFileMenu;
                t.Tag = project.FindSynthesis(Path.GetFileNameWithoutExtension(file.FullName));
                node.Nodes.Add(t);
            }
        }
        //FirstRunSetup is used when the program is run for the first time and sets up the username folder
        public static void FirstRunSetup(string username)
        {
            string path = "C:\\SynType\\Data";
            if (Directory.Exists(path))
                return;
            Directory.CreateDirectory(path);
            DirectoryInfo baseDInfo = new DirectoryInfo(path);
            baseDInfo.CreateSubdirectory(username);
        }
        //builds a new project folder heirarchy
        public static void BuildNewProjectFolder(string username, ProjectInfo projectInfo) 
        {
            //We locate the user folder that we are working with
            string path = "C:\\SynType\\Data\\"+username;
            DirectoryInfo baseDInfo = new DirectoryInfo(path);
            if (!baseDInfo.Exists)
                Console.WriteLine("FFManager.BuildNewProjectFolder: Could not find the username folder given");
            //first we create the new project folder
           
            Directory.CreateDirectory(baseDInfo.FullName + "\\" + projectInfo.ProjectName);
           
            using (Stream s = File.Create(baseDInfo.FullName + "\\" + projectInfo.ProjectName+".spf"))
            {
                BinaryFormatter bf = new BinaryFormatter();
                bf.Serialize(s, projectInfo);
            }
            
        }
        public static void SaveSynFile(Synthesis syn, Project project)
        {
            Header header = new Header(project.ProjectUser.UserID, DateTime.Now, 0);
            //Determine the new folder for this synthesis
            //Folder names for a synthesis are generated by an index 0-whatever an underscore and the synthesis name, so 0_synthesisname
            int index = project.AllSyntheses.IndexOf(syn);
            if (index == -1)
            {
                //the synthesis was not found in the project list, report error
                Console.WriteLine("Attempting to save a syn file but the synthesis is not present in the current project");
            }
            string foldername = index + "_" + syn.Name;
            string folderpath = project.ProjectPath + "\\" + foldername;
            Directory.CreateDirectory(folderpath);
            //Create a folder for spectra
            Directory.CreateDirectory(folderpath + "\\spectra");
            //and one for the molecules
            Directory.CreateDirectory(folderpath + "\\molecules");
            //And finally write the syn file
            List<Edit> edits = new List<Edit>();
            edits.Add(new Edit(syn, DateTime.Now));
            SynTypeFileWriter.WriteFile(header, edits, folderpath + "\\" + syn.Name+".syn");

        }
        public static void DeleteSynthesisFolder(Synthesis syn, Project project)
        {
            //Folder names for a synthesis are generated by an index 0-whatever an underscore and the synthesis name, so 0_synthesisname
            int projectID = syn.ProjectID;
            if (projectID == -1)
            {
                //the synthesis was not found in the project list, report error
                Console.WriteLine("Attempting to delete a syn folder but the synthesis is not present in the current project");
            }
            string foldername = projectID + "_" + syn.Name;
            string folderpath = project.ProjectPath + "\\" + foldername;
            Directory.Delete(folderpath, true); //delete the folder and all contents
        }
        private static void AddNewEdit() { } //writes an edit
    }
}
